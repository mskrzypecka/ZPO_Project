@model ZPO_Projekt.Data.Entities.Soup

@{
    ViewBag.Title = "AddOrder";
}

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="center col-4">
    <div class="info-section">Choose type of Order</div>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div id="newDishType" class="info-container">
        @foreach (var val in Enum.GetValues(typeof(ZPO_Projekt.Data.Entities.DishType)))
        {
            @Html.RadioButtonFor(model => model.DishType, val.ToString(), new { id = val.ToString() })
            <label for="@val.ToString()">@val.ToString()</label>
        }
    </div>

    <div class="info-section">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "" })
        <div id="newOrderName" class="info-container">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="info-section">
        @Html.LabelFor(model => model.DeliveryType, htmlAttributes: new { @class = "" })
        <div id="newOrderDeliveryType" class="info-container">
            @Html.EnumDropDownListFor(model => model.DeliveryType, new { htmlAttributes = new { @class = "" } })
            @Html.ValidationMessageFor(model => model.DeliveryType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="info-section">
        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "" })
        <div id="newOrderBirth" class="info-container">
            @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "" } })
            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="info-section">
        @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "" })
        <div id="newOrderWeight" class="info-container">
            @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "" } })
            @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="info-section">
        @Html.LabelFor(model => model.ImageLink, htmlAttributes: new { @class = "" })
        <div id="newOrderImage" class="info-container">
            @Html.EditorFor(model => model.ImageLink, new { htmlAttributes = new { @class = "" } })
            @Html.ValidationMessageFor(model => model.ImageLink, "", new { @class = "text-danger" })
        </div>
    </div>

    <input id="newOrderSubmit" type="submit" value="Choose" class="btn" />
</div>
}

<div class="center">
    @Html.ActionLink("Back to List", "Index", null, htmlAttributes: new { @class = "link-dark"})
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
